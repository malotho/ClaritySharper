{
"version": 3,
"sourceRoot": "Source",
"sources": ["ws2/Clarity.fs", "ws2/Client.fs"],
"sourcesContent": ["namespace ws2\nopen WebSharper\n\n[<JavaScript>]\nmodule Clarity =\n\n    open WebSharper.UI.Html\n    open WebSharper.UI.Client\n    open WebSharper.UI\n    open WebSharper.JavaScript\n    open System.Globalization\n    open FSharp.Date\n    open System\n    open WebSharper.Core.AST\n\n    type Date = DateProvider<epoch=1970>\n\n    type ClarityButtonType = \n        | Primary\n        | Success\n        | Warning\n        | Danger\n        | Regular\n        | SuccessOutline\n        | Info\n        | WarningOutline\n        | DangerOutline\n        | Flat\n        | Secondary\n        | Tertiary\n\n    type ClaritySelectVar = {\n        Selection: string \n        ErrorState: bool \n        Values: List<string> \n        SubText: string\n        Id: string\n        Label: string\n        }\n\n    type ClarityInputVar = {\n        Value: string\n        Label: string\n        ErrorState: bool\n        SubText: string\n        Placeholder: string\n        Id: string\n    }\n\n    type ClarityCheckboxItem = {\n        Option: string\n        Checked: bool\n    }\n\n    type ClarityCheckboxVar = {\n        Id: string\n        ErrorState: bool\n        SubText: string\n        Options: ListModel<ClarityCheckboxItem, ClarityCheckboxItem>\n        Label: string\n    }\n\n    type ClarityButtonSpec = {\n        Type: ClarityButtonType\n        Disabled: bool\n        Size: ButtonSize\n        Text: string\n    }\n    and ButtonSize = \n        | Small\n        | Normal\n\n    type ClarityDatePickerVar ={\n        TheDate: string\n        Month: int\n        Year: int\n        Day: int\n    }\n\n    let AttrDisabledDyn = Attr.DynamicPred \"disabled\"\n    \n    let ButtonSizePred = Attr.DynamicClassPred \"btn-sm\"\n\n    let ClarityButton (spec:Var<ClarityButtonSpec>) callback = \n        let ButtonClass t = \n            match t with \n                | ClarityButtonType.Primary -> \"btn-primary\"\n                | ClarityButtonType.Success -> \"btn-success\"\n                | ClarityButtonType.Danger -> \"btn-danger\"\n                | ClarityButtonType.Warning -> \"btn-warning\"\n                | ClarityButtonType.Regular -> \"btn-outline\"\n                | ClarityButtonType.SuccessOutline -> \"btn-success-outline\"\n                | ClarityButtonType.Info -> \"btn-info-outline\"\n                | ClarityButtonType.WarningOutline -> \"btn-warning-outline\"\n                | ClarityButtonType.DangerOutline -> \"btn-danger-outline\"\n                | ClarityButtonType.Flat -> \"btn-link\"\n                | ClarityButtonType.Secondary -> \"\"\n                | ClarityButtonType.Tertiary -> \"btn-link\"\n        let classes = String.concat \" \" [\"btn\"; (ButtonClass spec.Value.Type)]\n        let vpred = V(spec.V.Disabled)\n        let vstr = (Var.Create \"\").View\n        let vsize = V(spec.V.Size).Map (fun p -> \n            match p with\n                | Small -> true\n                | Normal -> false\n            )\n        Doc.Button spec.Value.Text [attr.``class`` classes; (AttrDisabledDyn vpred vstr); ButtonSizePred vsize] callback\n        \n\n    //let ClarityTextInput attrs children var =\n    //    let a = attr.``type`` \"text\"::attr.``class`` \"clr-input\"::attrs\n    //    match var with\n    //        | Some(var) -> Doc.Input a var\n    //        | None -> input a children\n\n    let ClarityInputWrapper children =\n        div [attr.``class`` \"clr-input-wrapper\"] children\n\n    let ClaritySelectWrapper children = \n        div [attr.``class`` \"clr-select-wrapper\"] children\n    \n    let ClarityFormControl children =\n        div [attr.``class`` \"clr-form-control\"] children\n\n    let ClarityCheckboxWrapper children = \n        div [attr.``class`` \"clr-checkbox-wrapper\"] children\n\n    let ClarityControlContainer showError children =\n        let d = div [attr.``class`` \"clr-control-container\"; Attr.DynamicClassPred \"clr-error\" showError] children\n        d\n\n    let ClarityControlLabel (attrs:seq<Attr>) labelText =\n        label (Seq.append attrs [attr.``class`` \"clr-control-label\"]) [text labelText]\n\n    let ClaritySubtextWrapper children = \n        div [attr.``class`` \"clr-subtext-wrapper\"] children\n\n    let ClarityCheckbox attrs (ccv:Var<ClarityCheckboxVar>) =\n        let Id = ccv.Value.Id\n        let mapper k (vp:Var<ClarityCheckboxItem>) =\n            ClarityCheckboxWrapper [\n                Doc.CheckBox [attr.id vp.Value.Option] (Lens vp.V.Checked)\n                ClarityControlLabel [attr.``for`` vp.Value.Option] vp.Value.Option\n            ]\n        let res = ccv.Value.Options.MapLens mapper |> Doc.BindView Doc.Concat\n        let stw = ClaritySelectWrapper [\n            Doc.Element \"clr-icon\" [attr.``class`` \"clr-validate-icon\";Attr.Create \"shape\" \"exclamation-circle\"] []\n            span [attr.``class`` \"clr-subtext\"] [Doc.TextView (Lens ccv.V.SubText).View]\n        ]\n        let d2 = ClarityControlContainer (Lens ccv.V.ErrorState).View [res]::[stw]\n        ClarityFormControl (ClarityControlLabel [] ccv.Value.Label::d2)\n\n\n    let ClarityInput attrs (civ:Var<ClarityInputVar>) =\n        let Id = civ.Value.Id\n        let a = attr.placeholder civ.Value.Placeholder::attr.id Id::attr.``type`` \"text\"::attr.``class`` \"clr-input\"::attrs\n        let doc = Doc.Input a (Lens civ.V.Value)\n        let wdoc = ClarityInputWrapper [\n            doc\n            Doc.Element \"clr-icon\" [attr.``class`` \"clr-validate-icon\";Attr.Create \"shape\" \"exclamation-circle\"] []\n        ]\n        let d2 = ClarityControlContainer (Lens civ.V.ErrorState).View [\n            wdoc\n            span [attr.``class`` \"clr-subtext\"] [Doc.TextView (Lens civ.V.SubText).View]\n        ]\n        ClarityFormControl [\n            ClarityControlLabel [attr.``for`` Id] civ.Value.Label\n            d2\n        ]\n\n    let ClarityPassword attrs (civ:Var<ClarityInputVar>) =\n        let Id = civ.Value.Id\n        let a = attr.placeholder civ.Value.Placeholder::attr.id Id::attr.``type`` \"text\"::attr.``class`` \"clr-input\"::attrs\n        let doc = Doc.PasswordBox a (Lens civ.V.Value)\n        let wdoc = ClarityInputWrapper [\n            doc\n            Doc.Element \"clr-icon\" [attr.``class`` \"clr-validate-icon\";Attr.Create \"shape\" \"exclamation-circle\"] []\n        ]\n        let d2 = ClarityControlContainer (Lens civ.V.ErrorState).View [\n            wdoc\n            span [attr.``class`` \"clr-subtext\"] [Doc.TextView (Lens civ.V.SubText).View]\n        ]\n        ClarityFormControl [\n            ClarityControlLabel [attr.``for`` Id] civ.Value.Label\n            d2\n        ]\n\n    let ClaritySelect attrs (csv:Var<ClaritySelectVar>) =\n        let Id = csv.Value.Id\n        let showDefault (value) = \n            match box value with\n                | :? string as s -> s\n                | _ -> sprintf \"%A\" value\n        let a = attr.id Id::attr.``class`` \"clr-select\"::attrs\n        let doc = Doc.Select a showDefault csv.Value.Values (Lens csv.V.Selection)\n        let wdoc = ClaritySelectWrapper [\n            doc\n            Doc.Element \"clr-icon\" [attr.``class`` \"clr-validate-icon\";Attr.Create \"shape\" \"exclamation-circle\"] []\n        ]\n        let d2 = ClarityControlContainer (Lens csv.V.ErrorState).View [\n            wdoc\n            span [attr.``class`` \"clr-subtext\"] [Doc.TextView (Lens csv.V.SubText).View]\n        ]\n        ClarityFormControl [\n            ClarityControlLabel [attr.``for`` Id] csv.Value.Label\n            d2\n        ]\n\n    let ClarityInputGroup children = \n        div [attr.``class`` \"clr-input-group\"] children\n\n    let ClarityDateContainer children =\n        Doc.Element \"clr-date-container\" [attr.``class`` \"clr-form-control\"] children\n\n    type DatePickerType =\n        | Invisible\n        | DayPicker\n        | MonthPicker\n        | YearPicker\n\n    type DatePickerViewManager = {\n        CurrentView: DatePickerType\n    }\n\n    let MonthNameFromMonthNumber m =\n        match m with\n            | 1 -> \"Jan\"\n            | 2 -> \"Feb\"\n            | 3 -> \"Mar\"\n            | 4 -> \"Apr\"\n            | 5 -> \"May\"\n            | 6 -> \"Jun\"\n            | 7 -> \"Jul\"\n            | 8 -> \"Aug\"\n            | 9 -> \"Sep\"\n            | 10 -> \"Oct\"\n            | 11 -> \"Nov\"\n            | 12 -> \"Dec\"\n\n    let ClarityDatePicker (cdp:Var<ClarityDatePickerVar>) =\n        let dd = Lens cdp.V.Day\n        let m = Lens cdp.V.Month\n        let y = Lens cdp.V.Year\n        let AttrClrDate = Attr.DynamicPred \"clrDate\" (Var.Create true).View (Var.Create \"\").View\n        let cal = (Var.Create {CurrentView = Invisible})\n        let ccv = Lens cal.V.CurrentView\n        let activateMonthPicker a b =\n            ccv.Value <- MonthPicker\n        let activateYearPicker a b =\n            ccv.Value <- YearPicker\n        let clickHandler a b = \n            JavaScript.Console.Log(\"clicked\")\n            let a = Lens cal.V.CurrentView\n            a.Value <- DayPicker \n            ()\n        let dayClickHandler (a:Dom.Element) b = \n            JavaScript.Console.Log(a.FirstChild.TextContent)\n            dd.Value <- a.FirstChild.TextContent |> int\n            ()\n        let blurHandler a b =\n            JavaScript.Console.Log(\"clicked\")\n            let a = Lens cal.V.CurrentView\n            //a.Value <- Invisible \n            ()\n        let previousMonthHandler a b =\n            let cd = DateTime(y.Value, m.Value, dd.Value).AddMonths(-1)\n            m.Value <- cd.Month\n            y.Value <- cd.Year\n            dd.Value <- cd.Day\n            ()\n        let nextMonthHandler a b =\n            let cd = DateTime(y.Value, m.Value, dd.Value).AddMonths(1)\n            m.Value <- cd.Month\n            y.Value <- cd.Year\n            dd.Value <- cd.Day\n            ()\n        let currentMonthHandler a b =\n            let cd = DateTime.Today\n            m.Value <- cd.Month\n            y.Value <- cd.Year\n            dd.Value <- cd.Day\n            ()\n\n        let c1 = input [attr.``type`` \"text\"] []\n        let c2 = button [attr.``type`` \"button\"; attr.``class`` \"clr-input-group-icon-action\"; Attr.Handler \"click\" clickHandler; Attr.Handler \"blur\" blurHandler] [\n            Doc.Element \"clr-icon\" [Attr.Create \"shape\" \"calendar\"] []\n        ]\n        let calendarStartDate year month =\n            let rec back (da:System.DateTime) =\n                match da.DayOfWeek with \n                    | System.DayOfWeek.Sunday -> da\n                    | _ -> back (da.AddDays(-1.0))\n            back (System.DateTime(year, month, 1))\n        let lastSaturday year month =\n            let rec moveToLast (lastDay:System.DateTime) =\n                match lastDay.DayOfWeek with\n                    | System.DayOfWeek.Saturday -> lastDay\n                    | _ -> moveToLast (lastDay.AddDays(1.0))\n            moveToLast((System.DateTime(year, month+1, 1)).AddDays(-1.0))\n\n        let createDateRange4 (date1:System.DateTime) date2 =\n            let start = min date1 date2\n            let totalDays = (date2 - date1).TotalDays |> abs |> int |> (+) 1\n            Seq.init totalDays (float >> start.AddDays)            \n\n        let monthPicker () : Doc list =\n            [Doc.Element \"clr-datepicker-view-manager\" [attr.``class`` \"datepicker\";attr.tabindex \"0\"] [\n                    Doc.Element \"clr-monthpicker\" [Attr.Class \"monthpicker\"] [\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"January\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"February\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"March\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"April\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"May\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"June\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"July\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"August\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"September\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"October\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"November\"]\n                        button [attr.``class`` \"calendar-btn month\";attr.``type`` \"button\";attr.tabindex \"-1\"] [text \"December\"]\n                    ]\n                ] \n            ]\n        let yearPicker () : Doc list =\n            [Doc.Element \"clr-datepicker-view-manager\" [attr.``class`` \"datepicker\";attr.tabindex \"0\"] [div [] []] ]\n        let dayPicker () : Doc list =\n            let start year month = calendarStartDate year month\n            let endDate year month = lastSaturday year month\n            let datelist year month = createDateRange4 (start year month) (endDate year month)\n            let datelistByWeek year month = Seq.chunkBySize 7 (datelist year month)\n            let calday (day:DateTime) =\n                let ddoc x = \n                    match x with\n                    | (d1, d2, m1, m2) when m1 <> m2 -> button [attr.``class`` \"day-btn is-disabled\"; attr.``type`` \"button\"; attr.tabindex \"-1\"; Attr.Handler \"click\" dayClickHandler] [text (day.Day.ToString())]\n                    | (d1, d2, m1, m2) when d1 = DateTime.Today.Day && m1 = DateTime.Today.Month -> button [attr.``class`` \"day-btn is-today\"; attr.``type`` \"button\"; attr.tabindex \"-1\"; Attr.Handler \"click\" dayClickHandler] [text (day.Day.ToString())]\n                    | _ -> button [attr.``class`` \"day-btn\"; attr.``type`` \"button\"; attr.tabindex \"-1\"; Attr.Handler \"click\" dayClickHandler] [text (day.Day.ToString())]\n                td [attr.``class`` \"calendar-cell\"] [\n                    Doc.Element \"clr-day\" [attr.``class`` \"day\"] [\n                        ddoc (day.Day, dd.Value, day.Month, m.Value)\n                    ]\n                ]\n            let calrow (w:DateTime []) =\n                tr [attr.``class`` \"calendar-row\"] (seq {for day in w -> (calday day)})\n            let calRows year month =\n                seq {for week in datelistByWeek year month -> (calrow week)}\n                    \n\n            let dpickbinder (v:ClarityDatePickerVar) =\n                Doc.Element \"clr-daypicker\" [attr.``class`` \"daypicker\"] [\n                    div [attr.``class`` \"calendar-header\"] [\n                        div [attr.``class`` \"calendar-pickers\"] [\n                            button [attr.``class`` \"calendar-btn monthpicker-trigger\"; attr.``type`` \"button\"; Attr.Handler \"click\" activateMonthPicker] [text (MonthNameFromMonthNumber(v.Month))]\n                            button [attr.``class`` \"calendar-btn yearpicker-trigger\"; attr.``type`` \"button\"; Attr.Handler \"click\" activateYearPicker] [text (v.Year.ToString())]\n                        ]\n                        div [attr.``class`` \"calendar-switchers\"] [\n                            button [attr.``class`` \"calendar-btn switcher\"; attr.``type`` \"button\"; Attr.Handler \"click\" previousMonthHandler] [\n                                Doc.Element \"clr-icon\" [attr.dir \"left\"; attr.shape \"angle\"] []\n                            ]\n                            button [attr.``class`` \"calendar-btn switcher\"; attr.``type`` \"button\"; Attr.Handler \"click\" currentMonthHandler] [\n                                Doc.Element \"clr-icon\" [attr.shape \"event\"] []\n                            ]\n                            button [attr.``class`` \"calendar-btn switcher\"; attr.``type`` \"button\"; Attr.Handler \"click\" nextMonthHandler] [\n                                Doc.Element \"clr-icon\" [attr.dir \"right\"; attr.shape \"angle\"] []\n                            ]\n                        ]\n                    ]\n                    Doc.Element \"clr-calendar\" [] [\n                        table [attr.``class`` \"calendar-table weekdays\"] [\n                            tbody [] [\n                                tr [attr.``class`` \"calendar-row\"] [\n                                    td [attr.``class`` \"calendar-cell\"] [text \"S\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"M\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"T\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"W\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"T\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"F\"]\n                                    td [attr.``class`` \"calendar-cell\"] [text \"S\"]\n                                ]\n                            ]\n                        ]\n                        table [attr.``class`` \"calendar-table calendar-dates\"] [\n                            tbody [] [\n                                calRows (v.Year) (v.Month) |> Doc.Concat\n                            ]\n                        ]\n                    ]\n                ]\n            let dpd = Doc.BindView dpickbinder cdp.View\n            [Doc.Element \"clr-datepicker-view-manager\" [attr.``class`` \"datepicker\";attr.tabindex \"0\"] [dpd] ]\n        let binder (v:DatePickerViewManager) = \n            match v.CurrentView with\n                | Invisible -> [Doc.Verbatim \"<!---->\"]\n                | DayPicker -> dayPicker()\n                | MonthPicker -> monthPicker()\n                | YearPicker -> yearPicker()\n            |> Doc.Concat\n        let d = Doc.BindView binder cal.View\n        let cig = ClarityInputGroup [\n            c1\n            c2\n            d\n        ]\n        let ciw = ClarityInputWrapper [\n            cig\n        ]\n        let cc = ClarityControlContainer (Var.Create false).View [\n            ciw\n        ]\n        cc\n\n\n        \n", "namespace ws2\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nopen WebSharper.UI.Client\nopen WebSharper.UI.Html\nopen WebSharper.UI.Templating\nopen Clarity\n\n[<JavaScript>]\nmodule Client =\n    \n    let factory = \n        // Infinite sequence of numbers & get enumerator\n        let numbers = Seq.initInfinite id\n        let en = numbers.GetEnumerator()\n        fun () -> \n            // Move to the next number and return it\n            en.MoveNext() |> ignore\n            en.Current\n\n\n    let csv = { \n        Selection = \"4\" \n        ErrorState = false\n        SubText = \"Helper Text\" \n        Values = [\"4\"; \"5\"; \"6\"]\n        Id = \"MySelect\"\n        Label = \"This is my label\"\n        }\n\n\n    let csvV = Var.Create csv\n    let stv = csvV.LensAuto (fun p -> p.SubText)\n    let selV = csvV.LensAuto (fun p -> p.Selection) \n    let showError = csvV.LensAuto (fun p -> p.ErrorState)\n    let csvSel = csvV.View.Map(fun i -> i.Selection)\n\n    let observe v =\n        JavaScript.Console.Log(v)\n        if v = \"6\" then \n            stv.Value <- \"some new helper\"\n            selV.Value <- \"4\"\n            showError.Value <- true\n\n    View.Sink observe csvSel\n\n    let civ = {\n        Value = \"\"\n        Placeholder = \"placeholder text\"\n        SubText = \"Helper text\"\n        ErrorState = false\n        Label = \"Some label\"\n        Id = \"MyInput\"\n        }\n\n    let civV = Var.Create civ\n\n    let username = Var.Create {\n        Value = \"\"\n        Placeholder = \"username\"\n        SubText = \"Please enter your username\"\n        ErrorState = false\n        Label = \"Username\"\n        Id = \"IdUsername\"\n    }\n\n    let password = Var.Create {\n        Value = \"\"\n        Placeholder = \"password\"\n        SubText = \"Please enter your pasword\"\n        ErrorState = false\n        Label = \"Password\"\n        Id = \"IdPassword\"\n    }\n\n    let checks = Var.Create {\n        Id = \"IdCheck\"\n        ErrorState = false\n        SubText = \"Choose some options\"\n        Label = \"Checkboxes\"\n        Options = ListModel.FromSeq [{Option = \"Option 1\"; Checked = false};{Option = \"Option 2\"; Checked = false}]\n    }\n\n    let mmm = checks.Value.Options\n\n    let item = {Option = \"Option 1\"; Checked = false}\n\n    let nnn : Var<ClarityCheckboxItem> = mmm.Lens item \n\n    let observe2 v = \n        JavaScript.Console.Log(v)\n\n    View.Sink observe2 mmm.View\n\n    let but1 = Var.Create {\n            Type = Danger\n            Disabled = false\n            Size = Small\n            Text = \"Press Me!\"\n        }\n\n    let cdp = Var.Create {\n        TheDate = \"\"\n        Year = 2019\n        Month = 3\n        Day = 24\n    }\n    \n\n    let pv = V(civV.V.Label)\n\n    let its = Var.Create []\n    let sel = Var.Create \"1\"\n    let sel2 = Var.Create 1\n    let loginType = Var.Create \"local\"\n    let v2 = sel2.View.Map(fun i -> sprintf \"%A\" i)\n\n    let GetNames () (callback: string list -> unit) =\n        async {\n            let! names = Server.GetNames ()\n            return callback names\n        }\n        |> Async.Start\n\n\n    type MyTemplate = Template<\"templates/my-template.html\">\n\n    let it mytext = li [] [text mytext]\n\n    let f (l:string list) : unit = \n        let a = Seq.toList l\n        its.Value <- a\n        //MyTemplate().Content()\n        ()\n\n\n    let f2 (n:string) : unit =\n        its.Value <- [n]\n        ()\n\n    let GetN () : unit = \n        GetNames () f\n        ()\n\n\n    let Main () =\n        let varText = Var.Create \"initial value\"\n        let d = \n            its.View \n            |> View.MapSeqCached(fun i ->\n                li [] [text (string i)]\n            )\n            |> Doc.BindView Doc.Concat\n        let rvInput = Var.Create \"\"\n        let submit = Submitter.CreateOption rvInput.View\n        let vReversed =\n            submit.View.MapAsync(function\n                | None -> async { return \"\" }\n                | Some input -> Server.DoSomething input\n            )\n        div [] [\n            div [attr.``class`` \"login-wrapper\"] [\n                form [attr.``class`` \"login\"] [\n                    section [attr.``class`` \"title\"] [\n                        h3 [attr.``class`` \"welcome\"] [text \"Welcome to\"]\n                        text \"Company Product Name\"\n                        h5 [attr.``class`` \"hint\"] [text \"Use your Company ID to sign in or create one now\"]\n                    ]\n                    div [attr.``class`` \"login-group\"] [\n                        div [attr.``class`` \"clr-control-container clr-form-control\"] [\n                            div [attr.``class`` \"clr-select-wrapper\"] [\n                                select [] [\n                                    Tags.option [attr.value \"local\"] [text \"Local Users\"]\n                                    Tags.option [attr.value \"admin\"] [text \"Administrator\"]\n                                ]\n                            ]\n                        ]\n                        ClarityInput [] username\n                        ClarityPassword [] password\n                        div [] [\n                            Doc.TextView sel.View\n                            Doc.TextView (Lens username.V.Value).View\n                            Doc.TextView varText.View\n                        ]\n                        ClaritySelect [] csvV\n                        ClarityInput [] civV\n                        ClarityCheckbox [] checks\n                        div [] [\n                            Doc.TextView csvSel\n                        ]\n                        ClarityButton but1 (fun () -> (Lens but1.V.Disabled).Value <- true )\n                        ClarityDatePicker cdp\n                    ]\n                ]\n            ]\n            Doc.Input [] rvInput\n            Doc.Button \"Send\" [] submit.Trigger\n            Doc.Button \"Get\" [] GetN\n            hr [] []\n            h4 [attr.``class`` \"text-muted\"] [text \"The server responded:\"]\n            div [attr.``class`` \"jumbotron\"] [h1 [] [textView vReversed]]\n            ul [] [d]\n            MyTemplate().Content(d)\n                .Doc()\n        ]\n\n"],
"names": [],
"mappings": "mxE,AAuPY,EAAG,K,AAAU,aAAW,C,AAAA,4B,AAExB,EAAG,K,AAAU,YAAU,C,AAAA,2B,AAEA,SAAS,E,AAEhC,OADa,EAAG,kG,AACf,K,AAAU,WAAS,uC,AAGG,EAAC,W,AAAW,Y,AAAY,E,AAC/C,EAAE,K,AAAU,iBAAA,EAAC,W,AAAW,Y,AAAmB,E,AAAA,uC,AAGpB,SAAS,S,AACnB,EAAG,iJ,AAIP,GAAA,YAAS,EAAC,M,AAAM,C,AAAE,EAAC,M,AAAM,G,AAAE,EAAE,M,AAAM,Y,AAAC,a,AAApC,EAAkD,C,AAAH,EAAE,C,AAAC,E,AAC3D,EAAC,K,AAAU,YAAA,EAAE,e,AAAM,E,AACnB,EAAC,K,AAAU,YAAA,EAAE,gB,AAAK,E,AAClB,EAAE,K,AAAU,YAAA,EAAE,Y,AAAI,gD,AAGT,GAAA,YAAS,EAAC,M,AAAM,C,AAAE,EAAC,M,AAAM,G,AAAE,EAAE,M,AAAM,Y,AAAC,a,AAApC,EAAiD,C,AAAF,CAAC,C,AAAC,E,AAC1D,EAAC,K,AAAU,YAAA,EAAE,e,AAAM,E,AACnB,EAAC,K,AAAU,YAAA,EAAE,gB,AAAK,E,AAClB,EAAE,K,AAAU,YAAA,EAAE,Y,AAAI,gD,AAGT,4BAAc,E,AACvB,EAAC,K,AAAU,OAAA,EAAE,e,AAAM,E,AACnB,EAAC,K,AAAU,OAAA,EAAE,gB,AAAK,E,AAClB,EAAE,K,AAAU,OAAA,EAAE,Y,AAAI,+C,AAYZ,OAAgB,EAAI,C,AAAE,EAAK,G,AAAE,CAAC,Y,AAAC,gB,AAH3B,OAAA,EAAE,W,AAAU,I,AAAZ,EAAY,G,AAAZ,CAAY,Q,AACe,EAAE,S,AAClB,EAAE,C,AAAS,EAAI,S,AAAC,uC,AAO1B,GAAC,OAAgB,EAAI,C,AAAE,EAAK,C,AAAC,CAAC,G,AAAE,CAAC,Y,AAAC,C,AAAlC,EAAiD,C,AAAL,EAAI,S,AAAC,iB,AAHlD,OAAA,EAAO,W,AAAU,I,AAAjB,EAAiB,G,AAAjB,CAAiB,Q,AACY,EAAO,S,AACnB,EAAO,C,AAAS,CAAG,S,AAAC,uD,AAMlB,EAAa,C,AAAb,EAAa,S,AAAA,K,AAF9B,2BAAe,Q,AACvB,OAAwD,CAAI,C,AAAZ,OAAG,C,AAAvC,OAAA,GAAC,EAAK,C,AAAG,EAAK,C,AAAd,EAAyB,S,AAAA,E,AAAO,C,AAAgB,C,AAC5C,uBAAA,IAAK,O,AAAiB,C,AAD7B,uB,AAIb,WAAC,UAAA,6BAAyC,C,AAAzC,WAA2C,iBAAe,YAAY,C,AAAA,C,AAAC,oBAAc,GAAG,C,AAAA,E,AAA/C,C,AAAzC,WACO,UAAA,iBAA6B,C,AAA7B,WAA+B,QAAW,aAAa,C,AAAA,E,AAA1B,C,AAA7B,WACI,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,SAAS,C,AAAA,E,AAAC,C,AACvG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,UAAU,C,AAAA,E,AAAC,C,AACxG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,OAAO,C,AAAA,E,AAAC,C,AACrG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,OAAO,C,AAAA,E,AAAC,C,AACrG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,KAAK,C,AAAA,E,AAAC,C,AACnG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,MAAM,C,AAAA,E,AAAC,C,AACpG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,MAAM,C,AAAA,E,AAAC,C,AACpG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,QAAQ,C,AAAA,E,AAAC,C,AACtG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,WAAW,C,AAAA,E,AAAC,C,AACzG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,SAAS,C,AAAA,E,AAAC,C,AACvG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,UAAU,C,AAAA,E,AAAC,C,AACxG,oBAAQ,iBAAe,oBAAoB,C,AAAA,C,AAAC,gBAAc,QAAQ,C,AAAA,C,AAAC,oBAAc,IAAI,C,AAAA,G,AAAG,WAAK,UAAU,C,AAAA,E,AAAC,E,AAZ/E,C,AAa5B,E,AAdiC,C,AAerC,E,AACJ,uB,AAED,WAAC,UAAA,6BAAyC,C,AAAzC,WAA2C,iBAAe,YAAY,C,AAAA,C,AAAC,oBAAc,GAAG,C,AAAA,E,AAA/C,C,AAAzC,WAA2F,sBAAS,E,AAA3D,C,AAA4D,E,AAAE,iD,AAI9E,GAAkB,GAAM,EAAI,C,AAAC,EAAK,C,AAAA,C,AAAG,GAAQ,EAAI,C,AAAC,EAAK,C,AAAA,C,AAAC,4B,AAClD,cAAgB,CAAC,C,AAAE,GAAS,EAAI,C,AAAC,EAAK,C,AAAA,C,AAAC,wD,AAE/D,gBAKA,iBAAe,eAAe,C,AAAA,G,AAC9B,UAAA,SAAqB,C,AAArB,WAAuB,iBAAe,KAAK,C,AAAA,E,AAAtB,C,AAArB,YACI,GAAM,OAAA,EAAG,Y,AAAI,E,AAAE,EAAE,U,AAAQ,OAAA,EAAG,e,AAAM,C,AALd,EAAE,G,AAKc,EAAC,M,AALT,C,AAAI,oBAAQ,iBAAe,qBAAqB,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,oBAAc,IAAI,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,oDAAe,C,AAAA,G,AAAG,YAAM,GAAA,OAAA,EAAG,Y,AAAI,U,AAAP,EAAkB,C,AAAA,E,AAAC,E,AAAC,C,AACvK,EAAE,I,AAAG,IAAA,4BAAc,S,AAAd,EAAkB,Y,AAAA,C,AAAA,E,AAAI,EAAE,I,AAAG,IAAA,4BAAc,S,AAAd,EAAoB,e,AAAA,C,AAAA,C,AAAI,oBAAQ,iBAAe,kBAAkB,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,oBAAc,IAAI,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,oDAAe,C,AAAA,G,AAAG,YAAM,GAAA,OAAA,EAAG,Y,AAAI,U,AAAP,EAAkB,C,AAAA,E,AAAC,E,AAAC,C,AACjO,oBAAQ,iBAAe,SAAS,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,oBAAc,IAAI,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,oDAAe,C,AAAA,G,AAAG,YAAM,GAAA,OAAA,EAAG,Y,AAAI,U,AAAP,EAAkB,C,AAAA,E,AAAC,E,AAAC,C,AAGtG,G,AAD3B,C,AAEpB,E,AARK,yB,AAWV,gBAAI,iBAAe,cAAc,C,AAAA,E,AAAG,QAAK,kBAAA,MAAW,EAAC,C,AAAD,EAAC,C,AAAgB,E,AAAA,C,AAAC,C,AAAC,4B,AAEvE,QAAK,kBAAA,MAAY,EAAyB,C,AAAzB,GAAe,EAAI,C,AAAC,EAAK,C,AAAA,C,AAAiB,E,AAAA,C,AAAC,K,AA2CtD,WAAa,oBAvCnB,UAAA,eAA2B,C,AAA3B,WAA6B,iBAAe,WAAW,C,AAAA,E,AAA5B,C,AAA3B,WACI,iBAAK,iBAAe,iBAAiB,C,AAAA,G,AACjC,iBAAK,iBAAe,kBAAkB,C,AAAA,G,AAClC,oBAAQ,iBAAe,kCAAkC,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAmB,C,AAAA,G,AAAG,WAAM,2BAAyB,EAAO,M,AAAA,C,AAAC,C,AAAC,E,AAAC,C,AACvK,oBAAQ,iBAAe,iCAAiC,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAkB,C,AAAA,G,AAAG,WAAM,SAAA,EAAM,K,AAAA,C,AAAW,C,AAAC,E,AAAC,E,AACxJ,C,AACD,iBAAK,iBAAe,oBAAoB,C,AAAA,G,AACpC,oBAAQ,iBAAe,uBAAuB,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAoB,C,AAAA,G,AAC7G,UAAA,UAAsB,C,AAAtB,WAAwB,eAAS,MAAM,C,AAAA,C,AAAE,iBAAW,OAAO,C,AAAA,E,AAArC,C,AAAtB,SAAsB,C,AAAyC,E,AAClE,C,AACD,oBAAQ,iBAAe,uBAAuB,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAmB,C,AAAA,G,AAC5G,UAAA,UAAsB,C,AAAtB,WAAwB,iBAAW,OAAO,C,AAAA,E,AAApB,C,AAAtB,SAAsB,C,AAAwB,E,AACjD,C,AACD,oBAAQ,iBAAe,uBAAuB,C,AAAA,C,AAAE,gBAAc,QAAQ,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAgB,C,AAAA,G,AACzG,UAAA,UAAsB,C,AAAtB,WAAwB,eAAS,OAAO,C,AAAA,C,AAAE,iBAAW,OAAO,C,AAAA,E,AAAtC,C,AAAtB,SAAsB,C,AAA0C,E,AACnE,E,AACJ,E,AACJ,C,AACD,UAAA,cAA0B,C,AAA1B,SAA0B,C,AAA1B,WACI,mBAAO,iBAAe,yBAAyB,C,AAAA,G,AAC3C,sBACI,gBAAI,iBAAe,cAAc,C,AAAA,G,AAC7B,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,C,AAC9C,gBAAI,iBAAe,eAAe,C,AAAA,G,AAAG,WAAK,GAAG,C,AAAA,E,AAAC,E,AACjD,E,AACJ,E,AACJ,C,AACD,mBAAO,iBAAe,+BAA+B,C,AAAA,G,AACjD,sBACkC,QAAU,C,AAAxC,GAAS,EAAM,K,AAAA,C,AAAG,EAAO,M,AAAA,C,AAAC,C,AAAc,E,AAC3C,E,AACJ,E,AAlBqB,C,AAmBzB,E,AArCsB,C,AAsC1B,E,AAC6B,C,AAAC,EAAG,W,AAAK,C,AAAA,Q,AAC3C,WAAC,UAAA,6BAAyC,C,AAAzC,WAA2C,iBAAe,YAAY,C,AAAA,C,AAAC,oBAAc,GAAG,C,AAAA,E,AAA/C,C,AAAzC,WAA2F,EAAG,E,AAArD,C,AAAsD,E,AAAE,K,AApJ7F,OAAK,EAAG,6F,AAAM,I,AACf,OAAK,EAAG,6F,AAAQ,I,AAChB,OAAK,EAAG,6F,AAAO,e,AACY,SAAS,C,AAAE,WAAW,IAAI,C,AAAA,W,AAAM,C,AAAE,WAAW,EAAE,C,AAAA,W,AAAM,K,AAC7E,WAAW,MAAe,WAAS,C,AAAC,C,AAAA,I,AACrC,OAAK,EAAG,kG,AAAc,I,AA6JtB,uBACN,qBALA,mBAnHY,gBAAc,MAAM,C,AAAA,K,AAmH9B,C,AACF,oBAnHa,gBAAc,QAAQ,C,AAAA,C,AAAE,iBAAe,6BAA6B,C,AAAA,C,AAAE,UAAa,OAAO,C,AAAC,qDAAY,C,AAAA,C,AAAE,UAAa,MAAM,C,AAAC,oDAAW,C,AAAA,G,AACrJ,UAAA,UAAsB,C,AAAtB,WAAwB,SAAA,OAAmB,C,AAAnB,UAAmB,C,AAAW,E,AAAhC,C,AAAtB,SAAsB,C,AAAoC,E,AAkHxD,C,AACF,WAJiB,2BADd,QAAU,E,AALP,GAAA,EAAa,Y,AAAA,C,AAAb,EAAa,K,AAAA,C,AAAb,IAAa,C,AAAb,EAAa,K,AAAA,C,AAAb,IAAa,C,AAAb,EAAa,K,AAAA,C,AAAb,IAAa,C,AAAb,WACc,WAAa,SAAS,C,AAAA,E,AADvB,E,AAKN,E,AACU,C,AAAC,EAAG,W,AAAK,C,AAI/B,E,AAGE,E,AACN,kC,AACiC,WAAW,KAAK,C,AAAA,W,AAAM,E,AACpD,EAAG,gD,AArLD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,CAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,EAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,EAAC,O,AAAD,KAAC,S,AAAD,EAAC,G,AAAD,EAAC,O,AAAD,KAAC,Y,AAAD,UAAA,YAAC,C,AAAD,GAAC,C,AAAD,EAAC,C,AAAA,8C,AAbP,UAAA,oBAAgC,C,AAAhC,WAAkC,iBAAe,kBAAkB,C,AAAA,E,AAAnC,C,AAAhC,EAAgC,C,AAA6C,2C,AAH7E,iBAAK,iBAAe,iBAAiB,C,AAAA,E,AAAE,EAAQ,C,AAAA,mD,AArBtC,EAAG,M,AAAS,G,AAAA,I,AAOV,wBACP,SAFiB,gBADb,iBAAU,I,AAAE,gBAAA,iBAAe,YAAY,C,AAAA,I,AAAE,EAAK,E,AAAA,E,AAChC,C,AAAC,oBAJb,OAAA,EAAS,U,AAAA,C,AAAT,EAAS,C,AAAT,CAEa,iEAAI,M,AAAA,E,AAAZ,EAAY,C,AAFR,E,AAIe,C,AAAC,EAAG,M,AAAa,O,AAAA,C,AAAE,OAAK,EAAG,yH,AAAY,C,AAElE,C,AACH,UAAA,UAAsB,C,AAAtB,WAAwB,iBAAe,mBAAmB,C,AAAA,C,AAAC,SAAA,OAAmB,C,AAAnB,oBAAmB,C,AAAqB,E,AAA7E,C,AAAtB,SAAsB,C,AAAiF,E,AAC1G,I,AACQ,0BAAyB,OAAK,EAAG,yH,AAAa,W,AAAM,E,AACzD,EAAI,C,AACJ,kBAAM,iBAAe,aAAa,C,AAAA,G,AAAG,WAAc,OAAK,EAAG,yH,AAAU,W,AAAM,C,AAAA,E,AAAC,E,AAC/E,Q,AACD,sBACI,uBAAqB,kBAAe,E,AAAE,EAAG,M,AAAY,M,AAAA,C,AAAA,C,AACrD,EAAE,E,AACL,qD,AAnCQ,EAAG,M,AAAS,G,AAAA,I,AAGV,uBACP,cAFsB,gBADlB,uBAAiB,EAAG,M,AAAkB,Y,AAAA,C,AAAA,I,AAAE,gBAAA,iBAAU,I,AAAE,gBAAA,gBAAc,MAAM,C,AAAA,I,AAAE,gBAAA,iBAAe,WAAW,C,AAAA,I,AAAE,EAAK,E,AAAA,E,AAAA,E,AAAA,E,AACxF,C,AAAE,OAAK,EAAG,0H,AAAQ,C,AAEtC,C,AACH,UAAA,UAAsB,C,AAAtB,WAAwB,iBAAe,mBAAmB,C,AAAA,C,AAAC,SAAA,OAAmB,C,AAAnB,oBAAmB,C,AAAqB,E,AAA7E,C,AAAtB,SAAsB,C,AAAiF,E,AAC1G,I,AACQ,0BAAyB,OAAK,EAAG,0H,AAAa,W,AAAM,E,AACzD,EAAI,C,AACJ,kBAAM,iBAAe,aAAa,C,AAAA,G,AAAG,WAAc,OAAK,EAAG,0H,AAAU,W,AAAM,C,AAAA,E,AAAC,E,AAC/E,Q,AACD,sBACI,uBAAqB,kBAAe,E,AAAE,EAAG,M,AAAY,M,AAAA,C,AAAA,C,AACrD,EAAE,E,AACL,kD,AA/BQ,EAAG,M,AAAS,G,AAAA,I,AAGV,uBACP,QAFgB,gBADZ,uBAAiB,EAAG,M,AAAkB,Y,AAAA,C,AAAA,I,AAAE,gBAAA,iBAAU,I,AAAE,gBAAA,gBAAc,MAAM,C,AAAA,I,AAAE,gBAAA,iBAAe,WAAW,C,AAAA,I,AAAE,EAAK,E,AAAA,E,AAAA,E,AAAA,E,AAC9F,C,AAAE,OAAK,EAAG,0H,AAAQ,C,AAEhC,C,AACH,UAAA,UAAsB,C,AAAtB,WAAwB,iBAAe,mBAAmB,C,AAAA,C,AAAC,SAAA,OAAmB,C,AAAnB,oBAAmB,C,AAAqB,E,AAA7E,C,AAAtB,SAAsB,C,AAAiF,E,AAC1G,I,AACQ,0BAAyB,OAAK,EAAG,0H,AAAa,W,AAAM,E,AACzD,EAAI,C,AACJ,kBAAM,iBAAe,aAAa,C,AAAA,G,AAAG,WAAc,OAAK,EAAG,0H,AAAU,W,AAAM,C,AAAA,E,AAAC,E,AAC/E,Q,AACD,sBACI,uBAAqB,kBAAe,E,AAAE,EAAG,M,AAAY,M,AAAA,C,AAAA,C,AACrD,EAAE,E,AACL,kD,AA9BQ,EAAG,U,AAMF,oBAAA,EAAG,M,AAAc,Q,AAAA,S,AAAS,uBAJhC,0BACI,YAAc,cAAQ,EAAE,M,AAAa,O,AAAA,C,AAAA,E,AAAG,OAAK,EAAE,+E,AAAU,C,AAAC,C,AAC1D,uBAAqB,eAAa,EAAE,M,AAAa,O,AAAA,C,AAAA,E,AAAE,EAAE,M,AAAa,O,AAAA,C,AAAA,E,AACrE,E,AACqC,C,AAA2B,C,AAAA,I,AAC3D,wBACN,UAAA,UAAsB,C,AAAtB,WAAwB,iBAAe,mBAAmB,C,AAAA,C,AAAC,SAAA,OAAmB,C,AAAnB,oBAAmB,C,AAAqB,E,AAA7E,C,AAAtB,SAAsB,C,AAAiF,C,AACvG,kBAAM,iBAAe,aAAa,C,AAAA,G,AAAG,WAAc,OAAK,EAAG,6G,AAAU,W,AAAM,C,AAAA,E,AAAC,E,AAC/E,I,AACQ,WAAA,0BAAyB,OAAK,EAAG,6G,AAAa,W,AAAM,E,AAAE,EAAG,E,AAAC,C,AAAG,EAAG,E,AAAC,6B,AACtD,gBAAA,yBAAuB,EAAG,M,AAAY,M,AAAA,C,AAAA,I,AAAE,EAAE,E,AAAA,gD,AAf9D,iBAAK,iBAAe,qBAAqB,C,AAAA,E,AAAE,EAAQ,C,AAAA,gD,AAHnD,kBAAO,SAAW,EAAK,E,AAAE,iBAAe,mBAAmB,C,AAAA,E,AAAC,E,AAAG,WAAK,EAAS,C,AAAA,E,AAAC,oD,AAJ1E,iBAAS,iBAAe,uBAAuB,C,AAAA,C,AAAE,mBAAsB,WAAW,C,AAAC,EAAS,C,AAAA,E,AAAE,EAAQ,C,AAArG,gD,AAHL,iBAAK,iBAAe,sBAAsB,C,AAAA,E,AAAE,EAAQ,C,AAAA,4C,AAHpD,iBAAK,iBAAe,kBAAkB,C,AAAA,E,AAAE,EAAQ,C,AAAA,8C,AAHhD,iBAAK,iBAAe,oBAAoB,C,AAAA,E,AAAE,EAAQ,C,AAAA,6C,AAHlD,iBAAK,iBAAe,mBAAmB,C,AAAA,E,AAAE,EAAQ,C,AAAA,yD,AAlBnC,SAAc,GAAG,E,AAAE,KAAK,E,AAAG,GAAY,EAAI,M,AAAW,K,AAAA,C,AAb1D,EAAC,K,AAAA,C,AAAD,aAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,YAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,aAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,aAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,qBAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,kBAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,qBAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,oBAAC,C,AAAD,EAAC,K,AAAA,C,AAAD,UAAC,C,AAAD,EAAC,M,AAAA,C,AAAD,EAAC,C,AAAD,EAAC,M,AAAA,C,AAAD,UAAC,C,AAAD,aAAC,G,AAa2D,I,AAC1D,0BAAE,EAAe,S,AAAA,G,AAAf,EAAI,Y,AAAY,I,AAClB,WAAW,EAAE,C,AAAA,W,AAAM,I,AACnB,MAAoB,oBACtB,EAAC,K,AAAA,E,AAEc,C,AAHb,0BAAE,EAAW,K,AAAA,G,AAAX,EAAI,Y,AAAQ,C,AAIrB,Q,AACL,SAAW,EAAI,M,AAAW,K,AAAA,E,AAAE,oBAAsB,C,AAAG,uBAAgB,EAAK,G,AAAC,EAAI,C,AAAA,C,AAAG,qBAAe,EAAK,C,AAAA,E,AAAE,EAAQ,C,AAAA,+L,AA3B9F,4BAAA,UAA2B,C,AAAA,kB,AAE5B,oBAAA,mBAAA,QAA8B,C,AAA9B,EAA8B,C,AAAA,E,AAAA,uD,ACmEjC,WAAW,eAAe,C,AAAA,I,AAEpC,oBAIG,eAHA,oBACC,mBAAO,WAAM,SAAO,EAAC,C,AAAA,C,AAAC,E,AAAC,E,AAC1B,C,AAHD,OAAG,W,AAGF,C,AACyB,C,AAAA,I,AAChB,WAAW,EAAE,C,AAAA,I,AACd,eAAuB,EAAO,W,AAAK,C,AAAA,I,AAE5C,WAAqB,0BAAA,iBAAQ,C,AAAR,8DAED,EAAwB,G,AAAA,E,AAFf,E,AAAR,EACP,IAAK,C,AAAL,QAAQ,kBAAA,SAAO,EAAE,C,AAAA,E,AAAA,C,AAAZ,C,AACyB,E,AAAA,C,AAF5C,EAAM,K,AAAK,C,AAGV,Q,AACL,oBACI,iBAAK,iBAAe,eAAe,C,AAAA,G,AAC/B,kBAAM,iBAAe,OAAO,C,AAAA,G,AACxB,qBAAS,iBAAe,OAAO,C,AAAA,G,AAC3B,gBAAI,iBAAe,SAAS,C,AAAA,G,AAAG,WAAK,YAAY,C,AAAA,E,AAAC,C,AACjD,WAAK,sBAAsB,C,AAAA,C,AAC3B,gBAAI,iBAAe,MAAM,C,AAAA,G,AAAG,WAAK,kDAAkD,C,AAAA,E,AAAC,E,AACvF,C,AACD,iBAAK,iBAAe,aAAa,C,AAAA,G,AAC7B,iBAAK,iBAAe,wCAAwC,C,AAAA,G,AACxD,iBAAK,iBAAe,oBAAoB,C,AAAA,G,AACpC,uBACI,oBAAa,iBAAW,OAAO,C,AAAA,G,AAAG,WAAK,aAAa,C,AAAA,E,AAAC,C,AACrD,oBAAa,iBAAW,OAAO,C,AAAA,G,AAAG,WAAK,eAAe,C,AAAA,E,AAAC,E,AAC1D,E,AACJ,E,AACJ,C,AACD,eAAa,SAAE,C,AAAC,YAAQ,C,AAAA,C,AACxB,kBAAgB,SAAE,C,AAAC,YAAQ,C,AAAA,C,AAC3B,oBACI,WAAa,OAAG,W,AAAK,C,AAAA,C,AACrB,WAAc,OAAK,YAAQ,wH,AAAQ,W,AAAM,C,AAAA,C,AACzC,WAAa,EAAO,W,AAAK,C,AAAA,E,AAC5B,C,AACD,gBAAc,SAAE,C,AAAC,QAAI,C,AAAA,C,AACrB,eAAa,SAAE,C,AAAC,QAAI,C,AAAA,C,AACpB,kBAAgB,SAAE,C,AAAC,UAAM,C,AAAA,C,AACzB,oBACI,WAAa,UAAM,C,AAAA,E,AACtB,C,AACD,gBAAc,QAAI,C,AAAE,WAAW,OAAK,QAAI,4F,AAAW,K,AAAW,IAAI,C,AAAA,E,AAAA,C,AAAE,C,AACpE,oBAAkB,OAAG,C,AAAA,E,AACxB,E,AACJ,E,AACJ,C,AACD,WAAa,EAAO,C,AAAA,C,AACpB,SAAW,MAAM,I,AAAI,WAAA,EAAc,U,AAAA,E,AAAA,C,AAAA,C,AACnC,SAAW,KAAK,I,AAAI,WAAA,QAAI,E,AAAA,C,AAAA,C,AACxB,qBAAQ,C,AACR,gBAAI,iBAAe,YAAY,C,AAAA,G,AAAG,WAAK,uBAAuB,C,AAAA,E,AAAC,C,AAC/D,iBAAK,iBAAe,WAAW,C,AAAA,G,AAAG,mBAAO,WAAS,EAAS,C,AAAA,E,AAAC,E,AAAC,C,AAC7D,mBAAO,EAAC,E,AAAC,C,AACT,CAAA,IAAA,GAAA,aAAuB,oB,AAAvB,SAAuB,I,AAAvB,EAAuB,M,AACb,G,AADV,GAAA,0BAAA,EACU,C,AAAA,E,AADV,GAAA,UAAA,EACU,G,AAAA,C,AADV,IAAA,EACU,G,AAAA,C,AAAA,C,AAAA,W,AAAA,C,AAAA,C,AAAA,W,AAAA,E,AACb,qB,AA/DD,WAAS,IAAE,C,AAAC,aAAA,IAAA,EAAC,C,AAAA,E,AAAA,C,AACX,qB,AALF,OAAG,K,AAAU,WAAC,EAAC,E,AAAC,C,AACd,8B,AARM,QAAW,EAAC,C,AAAA,C,AACpB,OAAG,K,AAAU,EAAC,6B,AAJF,mBAAO,WAAK,EAAM,C,AAAA,E,AAAC,qC,AAT/B,SAIG,GAJH,IAAK,C,AAAL,QACI,kBAAA,OAAa,6DAAkB,C,AAC/B,gBAAgB,EAAK,yB,AAAA,C,AADU,E,AAAA,C,AAD9B,E,AAIF,IAAW,C,AAAA,+X,AAhCd,MAAuB,EAAC,C,AAAC,sZ,AApDF,EAAC,E,AACrB,EAAC,G,AAAG,GAAG,E,AACN,OAAG,K,AAAU,iBAAiB,E,AAC9B,QAAI,K,AAAU,GAAG,E,AACjB,aAAS,K,AAAU,IAAI,C,AAAA,E,AAH3B,MAAe,sY,AA1BX,GACK,MAAA,eADsB,IAAE,C,AACjB,C,AAAgB,C,AAChC,WAEI,EAAE,W,AAAqB,Q,AACvB,EAAE,Y,AAAQ,Q,AAGR,MACM,GAAG,C,AACF,KAAK,C,AAET,WAAC,GAAG,C,AAAE,GAAG,C,AAAE,GAAG,E,AAAC,C,AADd,aAAa,C,AAElB,UAAU,C,AACP,kBAAkB,C,AACzB,Q,AAGM,WAAW,OAAG,C,AAAA,O,AACf,OAAA,QAAI,C,AAAW,oBAAS,EAAS,Q,AAAA,E,AAAA,8B,AAAT,EAAS,W,AAAT,EAAS,Y,AAAT,EAAS,W,AAAT,EAAS,I,AAAT,EAAS,U,AAAC,Q,AACjC,OAAA,QAAI,C,AAAW,oBAAS,EAAW,U,AAAA,E,AAAA,iC,AAAX,EAAW,Y,AAAX,EAAW,Q,AAAX,EAAW,S,AAAX,EAAW,I,AAAX,EAAW,U,AAAC,a,AAC/B,OAAA,QAAI,C,AAAW,oBAAS,EAAY,W,AAAA,E,AAAA,8B,AAAZ,EAAY,c,AAAZ,EAAY,Q,AAAZ,EAAY,S,AAAZ,EAAY,I,AAAZ,EAAY,U,AAAC,U,AACxC,MAAc,oBAAS,EAAW,U,AAAA,E,AAAA,C,AAAlC,QAAI,W,AAAK,C,AAA0B,Q,AAShD,aAAU,UAAA,EAAO,C,AAAA,E,AAAA,C,AAAjB,UAAiB,Q,AAEP,MACE,EAAE,C,AAIF,YAAY,C,AADP,KAAK,C,AADR,aAAa,C,AADT,kBAAkB,C,AAI3B,SAAS,C,AACb,Q,AAEM,WAAW,OAAG,C,AAAA,Y,AAEV,WAAW,MACd,EAAE,C,AAIF,UAAU,C,AADL,KAAK,C,AADR,4BAA4B,C,AADxB,UAAU,C,AAInB,YAAY,C,AACpB,C,AAAA,Y,AAEc,WAAW,MACd,EAAE,C,AAIF,UAAU,C,AADL,KAAK,C,AADR,2BAA2B,C,AADvB,UAAU,C,AAInB,YAAY,C,AACpB,C,AAAA,U,AAEY,WAAW,MACf,SAAS,C,AACD,KAAK,C,AACR,qBAAqB,C,AAErB,WAAmB,MAAU,UAAU,C,AAAY,KAAK,C,AAAC,C,AAAC,MAAU,UAAU,C,AAAY,KAAK,C,AAAC,E,AAAC,C,AADnG,YAAY,C,AAEvB,C,AAAA,O,AAES,UAAM,M,AAAc,Q,AAAA,Q,AAEnB,MAAU,UAAU,C,AAAY,KAAK,C,AAAC,O,AAEZ,OAAG,M,AAAM,QAAI,C,AAAA,Q,AAKlD,aAAU,WAAA,EAAQ,C,AAAA,E,AAAA,C,AAAC,OAAG,E,AAAJ,S,AAEP,WAAW,MACP,QAAM,C,AACF,KAAK,C,AACT,OAAK,C,AACL,WAAW,C,AACrB,C,AAAA,O,AAEK,WAAW,MACP,EAAE,C,AAEJ,CAAC,C,AADF,IAAI,C,AAEL,EAAE,C,AACX,C,AAAA,M,AAGQ,0BAAE,EAAY,M,AAAA,G,AAAZ,QAAI,Y,AAAS,O,AAEd,WAAW,SAAE,C,AAAA,O,AACb,WAAW,GAAG,C,AAAA,Q,AACb,WAAW,CAAC,C,AAAA,a,AACP,WAAW,OAAO,C,AAAA,M,AACzB,MAAc,mBAAS,CAAQ,iEAAI,M,AAAA,E,AAAZ,EAAY,C,AAAE,E,AAAA,C,AAArC,QAAI,W,AAAK,C,AAA6B,gE,AAuFvC,IACU,2C,AADV,sFACU,wC,AADV,IACU,2C,AADV,sFACU,Y;"
}
